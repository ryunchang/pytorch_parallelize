device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
use_cude :  True
@이제 모델을 만듭니다.
to()매서드 호출
Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1)) 모듈 _apply() 시작
convert(t) 함수 호출
convert(t) 함수 호출
Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1)) 모듈 _apply() 끝
MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) 모듈 _apply() 시작
MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False) 모듈 _apply() 끝
Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1)) 모듈 _apply() 시작
convert(t) 함수 호출
convert(t) 함수 호출
Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1)) 모듈 _apply() 끝
Linear(in_features=192, out_features=1000, bias=True) 모듈 _apply() 시작
convert(t) 함수 호출
convert(t) 함수 호출
Linear(in_features=192, out_features=1000, bias=True) 모듈 _apply() 끝
Linear(in_features=1000, out_features=10, bias=True) 모듈 _apply() 시작
convert(t) 함수 호출
convert(t) 함수 호출
Linear(in_features=1000, out_features=10, bias=True) 모듈 _apply() 끝
Linear(in_features=100, out_features=10, bias=True) 모듈 _apply() 시작
convert(t) 함수 호출
convert(t) 함수 호출
Linear(in_features=100, out_features=10, bias=True) 모듈 _apply() 끝
@모델을 생성 완료! model = Net().to(device)
@load_state_dice 완료!
@model.eval()완료!
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()

__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()

@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()

@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()

@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()

@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()

@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()

@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>
@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
input image 만들고 to(device)
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
@ inference할 데이터를 넣겠습니다.
__call__ 호출
forward 안 :  <bound method Net.forward of Net(
  (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (conv2): Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))
  (fc1): Linear(in_features=192, out_features=1000, bias=True)
  (fc2): Linear(in_features=1000, out_features=10, bias=True)
  (fc3): Linear(in_features=100, out_features=10, bias=True)
)>device().is_cpu() && is_cuda()
device().is_cpu() && is_cuda()

@ forward 함수 진입!
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv1(x) 호출완료
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
__call__ 호출
forward 안 :  <bound method Conv2d.forward of Conv2d(6, 12, kernel_size=(5, 5), stride=(1, 1))>
@ x = self.conv2(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method MaxPool2d.forward of MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)>
@ x = self.pool(x)
@ x = x.view(-1, 12 * 4 * 4)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=192, out_features=1000, bias=True)>
@ x = self.fc1(x)
@ x = F.relu(x)
__call__ 호출
forward 안 :  <bound method Linear.forward of Linear(in_features=1000, out_features=10, bias=True)>
@ x = self.fc2(x)
@ output = model(input_img) 완료!!
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
__call__ 호출
forward 안 :  <bound method Normalize.forward of Normalize(mean=(0.5,), std=(0.5,))>
